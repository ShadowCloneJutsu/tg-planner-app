import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, date
import io
from fpdf import FPDF  # pip install fpdf2

try:
    from huggingface_hub import InferenceClient  # pip install huggingface-hub

    HF_READY = True
except ImportError:
    HF_READY = False
    st.warning("huggingface-hub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# Hugging Face (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π)
try:
    HF_TOKEN = st.secrets["HF_TOKEN"]
    client = InferenceClient(token=HF_TOKEN) if HF_READY else None
except (KeyError, Exception) as e:
    client = None
    st.warning("HF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ–±–∞–≤—å HF_TOKEN –≤ Secrets.")

# SQLite setup
DB_FILE = 'tg_data.db'


def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            day_of_week TEXT,
            time TEXT,
            title TEXT,
            content_type TEXT,
            format TEXT,
            copywriter TEXT,
            reviewer TEXT,
            designer TEXT,
            chief_editor TEXT,
            status TEXT DEFAULT '–ù–µ –≥–æ—Ç–æ–≤',
            published TEXT DEFAULT '–ù–µ—Ç'
        )
    ''')
    conn.commit()
    conn.close()


def generate_ideas(topic):
    if not client:
        return "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π HF_TOKEN –≤ Secrets."
    prompt = f'–ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 –∏–¥–µ–π –¥–ª—è –ø–æ—Å—Ç–∞ –≤ TG-–∫–∞–Ω–∞–ª–µ –æ –º—É–∑—ã–∫–µ –ø–æ —Ç–µ–º–µ "{topic}". –£–∫–∞–∂–∏ —Ç–∏–ø (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π/–≤–æ–≤–ª–µ–∫–∞—é—â–∏–π/—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π), —Ñ–æ—Ä–º–∞—Ç (–∏–Ω—Ç–µ—Ä–≤—å—é/–Ω–æ–≤–æ—Å—Ç—å/–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ/–ø–æ–¥–∫–∞—Å—Ç/–º–µ–º—ã/—Ç—É—Ç–æ—Ä–∏–∞–ª) –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù—É–º–µ—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–æ–º –∏–¥–µ–π.'
    try:
        response = client.text_generation(
            prompt,
            model="mistralai/Mistral-7B-Instruct-v0.1",
            max_new_tokens=400,
            temperature=0.8,
            do_sample=True
        )
        ideas_text = response[len(prompt):].strip()
        ideas_list = [line.strip() for line in ideas_text.split('\n') if line.strip()][:5]
        return '\n'.join(ideas_list) if ideas_list else "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ HF: {str(e)}."


def generate_pdf(topic, ideas_text):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt=f"–ò–¥–µ–∏ –¥–ª—è TG-–ø–æ—Å—Ç–∞: {topic}", ln=1, align='C')
    pdf.ln(10)

    y = pdf.get_y()
    for i, idea in enumerate(ideas_text.split('\n'), 1):
        pdf.cell(200, 10, txt=f"{i}. {idea.strip()}", ln=1)
        y += 10
        if y > 250:
            pdf.add_page()
            y = 10

    pdf_output = io.BytesIO()
    pdf_output.write(pdf.output(dest='S').encode('latin1'))
    pdf_output.seek(0)
    return pdf_output.getvalue()


@st.cache_data(ttl=300)
def load_data():
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql_query("SELECT * FROM posts ORDER BY date, time", conn)
    conn.close()
    required_cols = ['date', 'day_of_week', 'time', 'title', 'content_type', 'format',
                     'copywriter', 'reviewer', 'designer', 'chief_editor', 'status', 'published']
    for col in required_cols:
        if col not in df.columns:
            df[col] = ''
    df.columns = ['ID'] + [c.capitalize().replace('_', ' ') for c in required_cols]
    return df


def add_post(date_str, time_str, title, content_type, format_str, copywriter):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    day_of_week = datetime.strptime(date_str, '%d %B %Y –≥.').strftime('%A')
    cursor.execute('''
        INSERT INTO posts (date, day_of_week, time, title, content_type, format, copywriter, status, published)
        VALUES (?, ?, ?, ?, ?, ?, ?, '–ù–µ –≥–æ—Ç–æ–≤', '–ù–µ—Ç')
    ''', (date_str, day_of_week, time_str, title, content_type, format_str, copywriter))
    conn.commit()
    conn.close()


def update_post(row_id, updates):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    for col, val in updates.items():
        col_map = {'–ù–∞–∑–≤–∞–Ω–∏–µ': 'title', '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞': 'content_type', '–§–æ—Ä–º–∞—Ç': 'format', '–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä': 'copywriter'}
        sql_col = col_map.get(col, col.lower().replace(' ', '_'))
        cursor.execute(f"UPDATE posts SET {sql_col} = ? WHERE id = ?", (val, row_id))
    conn.commit()
    conn.close()


def update_status(row_id, status):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE posts SET status = ? WHERE id = ?", (status, row_id))
    conn.commit()
    conn.close()


def update_published(row_id, published):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE posts SET published = ? WHERE id = ?", (published, row_id))
    conn.commit()
    conn.close()


# Streamlit UI
st.set_page_config(page_title="TG –ö–∞–Ω–∞–ª –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", layout="wide", page_icon="üéµ")

init_db()

st.title("üéµ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è TG-–∫–∞–Ω–∞–ª–∞")
st.markdown("---")

df = load_data()

# –°–∞–π–¥–±–∞—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
status_filter = st.sidebar.multiselect("–°—Ç–∞—Ç—É—Å", ['–ì–æ—Ç–æ–≤', '–ù–µ –≥–æ—Ç–æ–≤'], default=['–ù–µ –≥–æ—Ç–æ–≤'])
date_filter = st.sidebar.date_input("–î–∞—Ç–∞ –æ—Ç", value=date.today())

filtered_df = df[df['Status'].isin(status_filter)]
if 'Date' in filtered_df.columns:
    filtered_df = filtered_df[pd.to_datetime(filtered_df['Date'], errors='coerce').dt.date >= date_filter]

# –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–æ–≤
cols = st.columns(3)
for idx, row in filtered_df.iterrows():
    with cols[idx % 3]:
        with st.container():
            st.markdown(f"### {row.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            st.caption(f"üìÖ {row.get('Date', '')} | {row.get('Day Of Week', '')} | {row.get('Time', '')}")
            st.info(f"–¢–∏–ø: {row.get('Content Type', '')} | –§–æ—Ä–º–∞—Ç: {row.get('Format', '')}")
            st.caption(
                f"üë• {row.get('Copywriter', '')} ‚Üí {row.get('Reviewer', '')} ‚Üí {row.get('Designer', '')} ‚Üí {row.get('Chief Editor', '')}")
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("‚úèÔ∏è –ü—Ä–∞–≤–∫–∞", key=f"edit_{row.get('ID', idx)}"):
                    st.session_state.edit_row = row.get('ID')
            with col2:
                if st.button("–ì–æ—Ç–æ–≤" if row.get('Status', '') == '–ù–µ –≥–æ—Ç–æ–≤' else "–ù–µ –≥–æ—Ç–æ–≤",
                             key=f"status_{row.get('ID', idx)}"):
                    new_status = '–ì–æ—Ç–æ–≤' if row.get('Status', '') == '–ù–µ –≥–æ—Ç–æ–≤' else '–ù–µ –≥–æ—Ç–æ–≤'
                    update_status(row.get('ID'), new_status)
                    st.rerun()
            with col3:
                published = '–î–∞' if row.get('Published', '') == '–î–∞' else '–ù–µ—Ç'
                if st.button(published, key=f"pub_{row.get('ID', idx)}"):
                    new_published = '–î–∞' if row.get('Published', '') == '–ù–µ—Ç' else '–ù–µ—Ç'
                    update_published(row.get('ID'), new_published)
                    st.rerun()

# –ü—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
if 'edit_row' in st.session_state:
    with st.expander("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", expanded=True):
        row_id = st.session_state.edit_row
        row = df[df['ID'] == row_id].iloc[0]
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=row.get('Title', ''))
        new_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π'],
                                key=f"type_{row_id}")
        new_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ['–ò–Ω—Ç–µ—Ä–≤—å—é', '–ù–æ–≤–æ—Å—Ç—å', '–û–±—â–µ–Ω–∏–µ', '–í–∏–¥–µ–æ', '–ü–æ–¥–∫–∞—Å—Ç', '–ú–µ–º—ã', '–¢—É—Ç–æ—Ä–∏–∞–ª'],
                                  key=f"format_{row_id}")
        new_writer = st.text_input("–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä", value=row.get('Copywriter', ''))
        new_reviewer = st.text_input("–†–µ–≤–∏–∑–æ—Ä", value=row.get('Reviewer', ''))
        new_designer = st.text_input("–î–∏–∑–∞–π–Ω–µ—Ä", value=row.get('Designer', ''))
        new_chief = st.text_input("–ì–ª–∞–≤. —Ä–µ–¥.", value=row.get('Chief Editor', ''))
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∫–∏"):
            updates = {'–ù–∞–∑–≤–∞–Ω–∏–µ': new_name, '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞': new_type, '–§–æ—Ä–º–∞—Ç': new_format, '–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä': new_writer,
                       '–†–µ–≤–∏–∑–æ—Ä': new_reviewer, '–î–∏–∑–∞–π–Ω–µ—Ä': new_designer, '–ì–ª–∞–≤. —Ä–µ–¥.': new_chief}
            update_post(row_id, updates)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            del st.session_state.edit_row
            st.rerun()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π
st.markdown("---")
st.header("üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –æ—Ç Hugging Face")
topic = st.text_input("–í–≤–µ–¥–∏ —Ç–µ–º—É –∏–ª–∏ –∏–¥–µ—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Ä–µ—Ü–µ–Ω–∑–∏—è –Ω–∞ Pharaoh')")

if 'generated_ideas' not in st.session_state:
    st.session_state.generated_ideas = None
    st.session_state.generated_topic = None

if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤"):
    if topic:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏..."):
            ideas_text = generate_ideas(topic)
            st.session_state.generated_ideas = ideas_text
            st.session_state.generated_topic = topic
            st.markdown("### –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è HF:")
            st.write(ideas_text)

            export_format = st.selectbox("–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", ['CSV', 'PDF', 'TXT'], key="export_format")

            if st.button("üì• –°–∫–∞—á–∞—Ç—å –∏–¥–µ–∏"):
                ideas_list = [idea.strip() for idea in ideas_text.split('\n') if idea.strip()]
                safe_topic = topic.replace(' ', '_').replace('/', '_')
                filename = f"ideas_{safe_topic}.{export_format.lower()}"

                if export_format == 'CSV':
                    df_ideas = pd.DataFrame({'–¢–µ–º–∞': [topic] * len(ideas_list), '–ò–¥–µ—è': ideas_list})
                    csv_buffer = io.StringIO()
                    df_ideas.to_csv(csv_buffer, index=False, encoding='utf-8')
                    csv_data = csv_buffer.getvalue().encode('utf-8')
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=csv_data, file_name=filename,
                                       mime="text/csv")

                elif export_format == 'TXT':
                    txt_content = f"–ò–¥–µ–∏ –¥–ª—è TG-–ø–æ—Å—Ç–∞: {topic}\n\n" + ideas_text
                    txt_data = txt_content.encode('utf-8')
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=txt_data, file_name=filename,
                                       mime="text/plain")

                elif export_format == 'PDF':
                    pdf_data = generate_pdf(topic, ideas_text)
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=pdf_data, file_name=filename,
                                       mime="application/pdf")

            if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ—Å—Ç"):
                today = datetime.now().strftime('%d %B %Y –≥.')
                add_post(today, '', f'–ò–¥–µ—è –ø–æ "{topic}" –æ—Ç HF', '', '', st.session_state.get('user', ''))
                st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–∞–Ω!")
                st.rerun()
    else:
        st.warning("–í–≤–µ–¥–∏ —Ç–µ–º—É!")

# –ù–æ–≤—ã–π –ø–æ—Å—Ç
st.markdown("---")
st.header("‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
with st.form("new_post"):
    new_date = st.date_input("–î–∞—Ç–∞")
    new_time = st.time_input("–í—Ä–µ–º—è")
    new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ/–ò–¥–µ—è")
    new_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π'])
    new_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ['–ò–Ω—Ç–µ—Ä–≤—å—é', '–ù–æ–≤–æ—Å—Ç—å', '–û–±—â–µ–Ω–∏–µ', '–í–∏–¥–µ–æ', '–ü–æ–¥–∫–∞—Å—Ç', '–ú–µ–º—ã', '–¢—É—Ç–æ—Ä–∏–∞–ª'])
    new_writer = st.text_input("–ö–æ–ø–∏—Ä–∞–π—Ç–µ—Ä")
    new_reviewer = st.text_input("–†–µ–≤–∏–∑–æ—Ä")
    new_designer = st.text_input("–î–∏–∑–∞–π–Ω–µ—Ä")
    new_chief = st.text_input("–ì–ª–∞–≤. —Ä–µ–¥.")
    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
    if submitted:
        date_str = new_date.strftime('%d %B %Y –≥.')
        add_post(date_str, new_time.strftime('%H:%M'), new_name, new_type, new_format, new_writer)
        st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
        st.rerun()

# –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
st.markdown("---")
st.header("üìä –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–∞")
if not df.empty:
    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (—Å—Ç–∞—Ç—É—Å/–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ)
    def color_status(val):
        if val == '–ì–æ—Ç–æ–≤':
            return 'background-color: #d4edda'  # –ó–µ–ª—ë–Ω—ã–π
        else:
            return 'background-color: #f8d7da'  # –ö—Ä–∞—Å–Ω—ã–π


    def color_published(val):
        if val == '–î–∞':
            return 'background-color: #d1ecf1'  # –°–∏–Ω–∏–π
        else:
            return 'background-color: #fff3cd'  # –ñ—ë–ª—Ç—ã–π


    styled_df = df.style.applymap(color_status, subset=['Status']).applymap(color_published, subset=['Published'])
    st.dataframe(styled_df, use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
    csv = df.to_csv(index=False, encoding='utf-8')
    st.download_button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ CSV", csv, "plan.csv", "text/csv")
else:
    st.info("–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤—ã—à–µ!")

st.markdown("---")
st.caption("–ü–æ–ª–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å —Ç–∞–±–ª–∏—Ü–µ–π. –î–ª—è –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π!")