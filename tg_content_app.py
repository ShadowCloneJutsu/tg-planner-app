import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, date
import io
from fpdf import FPDF  # pip install fpdf2

try:
    from huggingface_hub import InferenceClient  # pip install huggingface-hub

    HF_READY = True
except ImportError:
    HF_READY = False
    st.warning("huggingface-hub –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

# Hugging Face (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏)
try:
    HF_TOKEN = st.secrets["HF_TOKEN"]
    client = InferenceClient(token=HF_TOKEN) if HF_READY else None
except (KeyError, Exception) as e:
    client = None
    st.warning("HF —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –î–æ–±–∞–≤—å HF_TOKEN –≤ Secrets.")

# SQLite setup
DB_FILE = 'tg_data.db'


def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã posts, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS posts (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT,
            day_of_week TEXT,
            time TEXT,
            title TEXT,
            content_type TEXT,
            format TEXT,
            rubrika TEXT,
            description TEXT,
            tz_text TEXT,
            tz_visual TEXT,
            deadline TEXT,
            status TEXT DEFAULT '–ù–µ –≥–æ—Ç–æ–≤',
            published TEXT DEFAULT '–ù–µ—Ç'
        )
    ''')
    conn.commit()
    conn.close()


def generate_ideas(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π –æ—Ç Hugging Face."""
    if not client:
        return "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π HF_TOKEN –≤ Secrets."
    prompt = f'–ü—Ä–µ–¥–ª–æ–∂–∏ 3-5 –∏–¥–µ–π –¥–ª—è –ø–æ—Å—Ç–∞ –≤ TG-–∫–∞–Ω–∞–ª–µ –æ –º—É–∑—ã–∫–µ –ø–æ —Ç–µ–º–µ "{topic}". –£–∫–∞–∂–∏ —Ç–∏–ø (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π/–≤–æ–≤–ª–µ–∫–∞—é—â–∏–π/—Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π), —Ñ–æ—Ä–º–∞—Ç (–∏–Ω—Ç–µ—Ä–≤—å—é/–Ω–æ–≤–æ—Å—Ç—å/–æ–±—â–µ–Ω–∏–µ/–≤–∏–¥–µ–æ/–ø–æ–¥–∫–∞—Å—Ç/–º–µ–º—ã/—Ç—É—Ç–æ—Ä–∏–∞–ª) –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù—É–º–µ—Ä—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã. –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–æ–º –∏–¥–µ–π.'
    try:
        response = client.text_generation(
            prompt,
            model="mistralai/Mistral-7B-Instruct-v0.1",
            max_new_tokens=400,
            temperature=0.8,
            do_sample=True
        )
        ideas_text = response[len(prompt):].strip()
        ideas_list = [line.strip() for line in ideas_text.split('\n') if line.strip()][:5]
        return '\n'.join(ideas_list) if ideas_list else "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ HF: {str(e)}."


def generate_pdf(topic, ideas_text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF —Å –∏–¥–µ—è–º–∏."""
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt=f"–ò–¥–µ–∏ –¥–ª—è TG-–ø–æ—Å—Ç–∞: {topic}", ln=1, align='C')
    pdf.ln(10)

    y = pdf.get_y()
    for i, idea in enumerate(ideas_text.split('\n'), 1):
        pdf.cell(200, 10, txt=f"{i}. {idea.strip()}", ln=1)
        y += 10
        if y > 250:
            pdf.add_page()
            y = 10

    pdf_output = io.BytesIO()
    pdf_output.write(pdf.output(dest='S').encode('latin1'))
    pdf_output.seek(0)
    return pdf_output.getvalue()


def load_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –≤ DataFrame. –£–±—Ä–∞–ª –∫—ç—à ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Å—Ä–∞–∑—É."""
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql_query("SELECT * FROM posts ORDER BY date, time", conn)
    conn.close()
    required_cols = ['date', 'day_of_week', 'time', 'title', 'content_type', 'format',
                     'rubrika', 'description', 'tz_text', 'tz_visual', 'deadline',
                     'status', 'published']
    for col in required_cols:
        if col not in df.columns:
            df[col] = ''
    df.columns = ['ID'] + [c.capitalize().replace('_', ' ') for c in required_cols]
    return df


def add_post(date_str, time_str, title, content_type, format_str, rubrika, description, tz_text, tz_visual, deadline):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –ë–î. –° —Ä—É—á–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º –¥–∞—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π."""
    try:
        # –†—É—á–Ω–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã: —É–¥–∞–ª—è–µ–º ' –≥.', —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –¥–µ–Ω—å/–º–µ—Å—è—Ü/–≥–æ–¥
        date_clean = date_str.replace(' –≥.', '').strip()
        date_parts = date_clean.split()
        if len(date_parts) != 3:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: '{date_str}'. –û–∂–∏–¥–∞–µ—Ç—Å—è 'dd –º–µ—Å—è—Ü yyyy'.")
        day = int(date_parts[0])
        month_str = date_parts[1]
        year = int(date_parts[2])

        # –°–ª–æ–≤–∞—Ä—å —Ä—É—Å—Å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤ (–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂)
        month_names = {
            '—è–Ω–≤–∞—Ä—è': 1, '—Ñ–µ–≤—Ä–∞–ª—è': 2, '–º–∞—Ä—Ç–∞': 3, '–∞–ø—Ä–µ–ª—è': 4, '–º–∞—è': 5, '–∏—é–Ω—è': 6,
            '–∏—é–ª—è': 7, '–∞–≤–≥—É—Å—Ç–∞': 8, '—Å–µ–Ω—Ç—è–±—Ä—è': 9, '–æ–∫—Ç—è–±—Ä—è': 10, '–Ω–æ—è–±—Ä—è': 11, '–¥–µ–∫–∞–±—Ä—è': 12
        }
        if month_str not in month_names:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü: '{month_str}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: —è–Ω–≤–∞—Ä—è, —Ñ–µ–≤—Ä–∞–ª—è –∏ —Ç.–¥.")
        month = month_names[month_str]

        # –°–æ–∑–¥–∞—ë–º datetime –¥–ª—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        dt = datetime(year, month, day)
        day_of_week_en = dt.strftime('%A')
        days_ru = {
            'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫', 'Wednesday': '–°—Ä–µ–¥–∞',
            'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥', 'Friday': '–ü—è—Ç–Ω–∏—Ü–∞', 'Saturday': '–°—É–±–±–æ—Ç–∞', 'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }
        day_ru = days_ru.get(day_of_week_en, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å')

        # INSERT –≤ –ë–î (11 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è 11 –ø–æ–ª–µ–π, status/published DEFAULT)
        conn = sqlite3.connect(DB_FILE)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO posts (date, day_of_week, time, title, content_type, format, rubrika, description, tz_text, tz_visual, deadline)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (date_str, day_ru, time_str, title, content_type, format_str, rubrika, description, tz_text, tz_visual,
              deadline))
        conn.commit()
        last_id = cursor.lastrowid  # ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ –¥–ª—è debug
        conn.close()
        st.write(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î: ID {last_id}")  # Debug ‚Äî —É–≤–∏–¥–∏—à—å ID
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {str(e)}")
        return False


def update_post(row_id, updates):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    for col, val in updates.items():
        col_map = {'–ù–∞–∑–≤–∞–Ω–∏–µ': 'title', '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞': 'content_type', '–§–æ—Ä–º–∞—Ç': 'format', '–†—É–±—Ä–∏–∫–∞': 'rubrika',
                   '–û–ø–∏—Å–∞–Ω–∏–µ': 'description', '–¢–ó(–¢–µ–∫—Å—Ç)': 'tz_text', '–¢–ó(–í–∏–∑—É–∞–ª)': 'tz_visual', '–î–µ–¥–ª–∞–π–Ω': 'deadline'}
        sql_col = col_map.get(col, col.lower().replace(' ', '_'))
        cursor.execute(f"UPDATE posts SET {sql_col} = ? WHERE id = ?", (val, row_id))
    conn.commit()
    conn.close()


def update_status(row_id, status):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE posts SET status = ? WHERE id = ?", (status, row_id))
    conn.commit()
    conn.close()


def update_published(row_id, published):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("UPDATE posts SET published = ? WHERE id = ?", (published, row_id))
    conn.commit()
    conn.close()


def delete_post(row_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID."""
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("DELETE FROM posts WHERE id = ?", (row_id,))
    conn.commit()
    conn.close()


# Streamlit UI
st.set_page_config(page_title="TG –ö–∞–Ω–∞–ª –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫", layout="wide", page_icon="üéµ")

init_db()

st.title("üéµ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è TG-–∫–∞–Ω–∞–ª–∞")
st.markdown("---")

df = load_data()

# –°–∞–π–¥–±–∞—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
st.sidebar.header("–§–∏–ª—å—Ç—Ä—ã")
status_filter = st.sidebar.multiselect("–°—Ç–∞—Ç—É—Å", ['–ì–æ—Ç–æ–≤', '–ù–µ –≥–æ—Ç–æ–≤'], default=['–ù–µ –≥–æ—Ç–æ–≤'])
date_filter = st.sidebar.date_input("–î–∞—Ç–∞ –æ—Ç", value=date.today())

filtered_df = df[df['Status'].isin(status_filter)]
if 'Date' in filtered_df.columns:
    filtered_df = filtered_df[pd.to_datetime(filtered_df['Date'], errors='coerce').dt.date >= date_filter]

# –ö–∞—Ä—Ç–æ—á–∫–∏ –ø–æ—Å—Ç–æ–≤ (—Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è)
cols = st.columns(4)  # 4 –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
for idx, row in filtered_df.iterrows():
    with cols[idx % 4]:
        with st.container():
            st.markdown(f"### {row.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            st.caption(f"üìÖ {row.get('Date', '')} | {row.get('Day Of Week', '')} | {row.get('Time', '')}")
            st.info(
                f"–¢–∏–ø: {row.get('Content Type', '')} | –§–æ—Ä–º–∞—Ç: {row.get('Format', '')} | –†—É–±—Ä–∏–∫–∞: {row.get('Rubrika', '')}")
            st.caption(f"–û–ø–∏—Å–∞–Ω–∏–µ: {row.get('Description', '')[:50]}...")
            st.caption(f"–¢–ó(–¢–µ–∫—Å—Ç): {row.get('Tz Text', '')[:30]}... | –¢–ó(–í–∏–∑—É–∞–ª): {row.get('Tz Visual', '')[:30]}...")
            st.caption(f"–î–µ–¥–ª–∞–π–Ω: {row.get('Deadline', '')}")
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                if st.button("‚úèÔ∏è –ü—Ä–∞–≤–∫–∞", key=f"edit_{row.get('ID', idx)}"):
                    st.session_state.edit_row = row.get('ID')
            with col2:
                if st.button("‚úÖ –ì–æ—Ç–æ–≤" if row.get('Status', '') == '–ù–µ –≥–æ—Ç–æ–≤' else "‚ùå –ù–µ –≥–æ—Ç–æ–≤",
                             key=f"status_{row.get('ID', idx)}"):
                    new_status = '–ì–æ—Ç–æ–≤' if row.get('Status', '') == '–ù–µ –≥–æ—Ç–æ–≤' else '–ù–µ –≥–æ—Ç–æ–≤'
                    update_status(row.get('ID'), new_status)
                    st.rerun()
            with col3:
                if st.button("üöÄ –î–∞" if row.get('Published', '') == '–ù–µ—Ç' else "‚è∏Ô∏è –ù–µ—Ç",
                             key=f"pub_{row.get('ID', idx)}"):
                    new_published = '–î–∞' if row.get('Published', '') == '–ù–µ—Ç' else '–ù–µ—Ç'
                    update_published(row.get('ID'), new_published)
                    st.rerun()
            with col4:
                if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_{row.get('ID', idx)}"):
                    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", key=f"confirm_delete_{row.get('ID', idx)}"):
                        delete_post(row.get('ID'))
                        st.success("–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω!")
                        st.rerun()

# –ü—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
if 'edit_row' in st.session_state:
    with st.expander("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç", expanded=True):
        row_id = st.session_state.edit_row
        row = df[df['ID'] == row_id].iloc[0]
        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", value=row.get('Title', ''))
        new_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π'],
                                key=f"type_{row_id}")
        new_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ['–ò–Ω—Ç–µ—Ä–≤—å—é', '–ù–æ–≤–æ—Å—Ç—å', '–û–±—â–µ–Ω–∏–µ', '–í–∏–¥–µ–æ', '–ü–æ–¥–∫–∞—Å—Ç', '–ú–µ–º—ã', '–¢—É—Ç–æ—Ä–∏–∞–ª'],
                                  key=f"format_{row_id}")
        new_rubrika = st.text_input("–†—É–±—Ä–∏–∫–∞", value=row.get('Rubrika', ''))
        new_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", value=row.get('Description', ''))
        new_tz_text = st.text_area("–¢–ó(–¢–µ–∫—Å—Ç)", value=row.get('Tz Text', ''))
        new_tz_visual = st.text_area("–¢–ó(–í–∏–∑—É–∞–ª)", value=row.get('Tz Visual', ''))
        new_deadline = st.date_input("–î–µ–¥–ª–∞–π–Ω", value=pd.to_datetime(row.get('Deadline', date.today()),
                                                                     errors='coerce').date() if row.get(
            'Deadline') else date.today())
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞–≤–∫–∏"):
            updates = {'–ù–∞–∑–≤–∞–Ω–∏–µ': new_name, '–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞': new_type, '–§–æ—Ä–º–∞—Ç': new_format, '–†—É–±—Ä–∏–∫–∞': new_rubrika,
                       '–û–ø–∏—Å–∞–Ω–∏–µ': new_description, '–¢–ó(–¢–µ–∫—Å—Ç)': new_tz_text, '–¢–ó(–í–∏–∑—É–∞–ª)': new_tz_visual,
                       '–î–µ–¥–ª–∞–π–Ω': new_deadline.strftime('%d %B %Y –≥.')}
            update_post(row_id, updates)
            st.success("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
            del st.session_state.edit_row
            st.rerun()

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π
st.markdown("---")
st.header("üí° –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–¥–µ–π –æ—Ç Hugging Face")
topic = st.text_input("–í–≤–µ–¥–∏ —Ç–µ–º—É –∏–ª–∏ –∏–¥–µ—é")

if 'generated_ideas' in st.session_state:
    st.session_state.generated_ideas = None
    st.session_state.generated_topic = None

if st.button("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å—Ç–æ–≤"):
    if topic:
        with st.spinner("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏..."):
            ideas_text = generate_ideas(topic)
            st.session_state.generated_ideas = ideas_text
            st.session_state.generated_topic = topic
            st.markdown("### –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è HF:")
            st.write(ideas_text)

            export_format = st.selectbox("–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞", ['CSV', 'PDF', 'TXT'], key="export_format")

            if st.button("üì• –°–∫–∞—á–∞—Ç—å –∏–¥–µ–∏"):
                ideas_list = [idea.strip() for idea in ideas_text.split('\n') if idea.strip()]
                safe_topic = topic.replace(' ', '_').replace('/', '_')
                filename = f"ideas_{safe_topic}.{export_format.lower()}"

                if export_format == 'CSV':
                    df_ideas = pd.DataFrame({'–¢–µ–º–∞': [topic] * len(ideas_list), '–ò–¥–µ—è': ideas_list})
                    csv_buffer = io.StringIO()
                    df_ideas.to_csv(csv_buffer, index=False, encoding='utf-8')
                    csv_data = csv_buffer.getvalue().encode('utf-8')
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=csv_data, file_name=filename,
                                       mime="text/csv")

                elif export_format == 'TXT':
                    txt_content = f"–ò–¥–µ–∏ –¥–ª—è TG-–ø–æ—Å—Ç–∞: {topic}\n\n" + ideas_text
                    txt_data = txt_content.encode('utf-8')
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=txt_data, file_name=filename,
                                       mime="text/plain")

                elif export_format == 'PDF':
                    pdf_data = generate_pdf(topic, ideas_text)
                    st.download_button(label=f"–°–∫–∞—á–∞—Ç—å {export_format}", data=pdf_data, file_name=filename,
                                       mime="application/pdf")

            if st.button("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –Ω–æ–≤—ã–π –ø–æ—Å—Ç"):
                today = datetime.now().strftime('%d %B %Y –≥.')
                add_post(today, '', f'–ò–¥–µ—è –ø–æ "{topic}" –æ—Ç HF', '', '', '', '', '', '', '')
                st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–ª–∞–Ω!")
                st.rerun()
    else:
        st.warning("–í–≤–µ–¥–∏ —Ç–µ–º—É!")

# –ù–æ–≤—ã–π –ø–æ—Å—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞)
st.markdown("---")
st.header("‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç")
with st.form("new_post"):
    new_date = st.date_input("–î–∞—Ç–∞")
    new_time = st.time_input("–í—Ä–µ–º—è")
    new_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ/–ò–¥–µ—è")
    new_type = st.selectbox("–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞", ['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π', '–í–æ–≤–ª–µ–∫–∞—é—â–∏–π', '–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π'])
    new_format = st.selectbox("–§–æ—Ä–º–∞—Ç", ['–ò–Ω—Ç–µ—Ä–≤—å—é', '–ù–æ–≤–æ—Å—Ç—å', '–û–±—â–µ–Ω–∏–µ', '–í–∏–¥–µ–æ', '–ü–æ–¥–∫–∞—Å—Ç', '–ú–µ–º—ã', '–¢—É—Ç–æ—Ä–∏–∞–ª'])
    new_rubrika = st.text_input("–†—É–±—Ä–∏–∫–∞")
    new_description = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ", height=100)
    new_tz_text = st.text_area("–¢–ó(–¢–µ–∫—Å—Ç)", height=100)
    new_tz_visual = st.text_area("–¢–ó(–í–∏–∑—É–∞–ª)", height=100)
    new_deadline = st.date_input("–î–µ–¥–ª–∞–π–Ω")
    submitted = st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å")
    if submitted:
        date_str = new_date.strftime('%d %B %Y –≥.')
        deadline_str = new_deadline.strftime('%d %B %Y –≥.')
        success = add_post(date_str, new_time.strftime('%H:%M'), new_title, new_type, new_format, new_rubrika,
                           new_description, new_tz_text, new_tz_visual, deadline_str)
        if success:
            st.success("–î–æ–±–∞–≤–ª–µ–Ω–æ!")
            st.rerun()
        else:
            st.error("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–æ—Ä–º–∞—Ç.")

# –¢–∞–±–ª–∏—Ü–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤ (—Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è)
st.markdown("---")
st.header("üìä –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞–Ω–∞")
if not df.empty:
    # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ü–≤–µ—Ç–æ–≤ (—Å—Ç–∞—Ç—É—Å/–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ)
    def color_status(val):
        if val == '–ì–æ—Ç–æ–≤':
            return 'background-color: #d4edda'  # –ó–µ–ª—ë–Ω—ã–π
        else:
            return 'background-color: #f8d7da'  # –ö—Ä–∞—Å–Ω—ã–π


    def color_published(val):
        if val == '–î–∞':
            return 'background-color: #d1ecf1'  # –°–∏–Ω–∏–π
        else:
            return 'background-color: #fff3cd'  # –ñ—ë–ª—Ç—ã–π


    styled_df = df.style.applymap(color_status, subset=['Status']).applymap(color_published, subset=['Published'])
    st.dataframe(styled_df, use_container_width=True)

    # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã
    csv = df.to_csv(index=False, encoding='utf-8')
    st.download_button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã –≤ CSV", csv, "plan.csv", "text/csv")

    # –¶–∏–∫–ª –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ (–¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏)
    st.subheader("–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã")
    for idx, row in df.iterrows():
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"–ü–æ—Å—Ç ID {row.get('ID', idx)}: {row.get('Title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({row.get('Date', '')})")
        with col2:
            if st.button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç", key=f"table_delete_{row.get('ID', idx)}"):
                if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ", key=f"confirm_table_delete_{row.get('ID', idx)}"):
                    delete_post(row.get('ID'))
                    st.success("–ü–æ—Å—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Ç–∞–±–ª–∏—Ü—ã!")
                    st.rerun()
else:
    st.info("–î–æ–±–∞–≤—å –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É –≤—ã—à–µ!")

st.markdown("---")
st.caption("ctrl+play")